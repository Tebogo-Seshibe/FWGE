{
    "Name": "Example Spinning Cube",
    "Scenes":
    [
        {
            "Name": "Main",
            "Objects":
            [
                {
                    "Name": "Cube",
                    "Mesh": "Cube Mesh",
                    "Material": "Cube Material",
                    "Update": "this.Transform.Rotation.Y -= FWGE.Game.Time.Delta;",
                    "Transform":
                    {
                        "Position": [0, 0, -5],
                        "Rotation": [0, 0, 0],
                        "Scale": [1, 1, 1],
                        "Shear": [0, 0, 0]
                    }
                },
                {
                    "Name": "Ambient Light"
                },
                {
                    "Name": "Point Light",
                    "Transform":
                    {
                        "Position": [0, 0, 0]
                    }
                }
            ],
            "Lights":
            {
                "Ambient":
                {
                    "Name": "Ambient Light",
                    "GameObject": "Ambient Light",
                    "Paint": [0.5, 0.5, 0.5, 1],
                    "Intensity": 1
                },
                "Directional": [],
                "Point":
                [
                    {
                        "Name": "Point Light",
                        "GameObject": "Point Light",
                        "Paint": [1, 1, 1, 1],
                        "Intensity": 1,
                        "Angle": 180,
                        "Radius": 5,
                        "Shininess": 32
                    }
                ]
            }
        }
    ],
    "Resources":
    {
        "Materials":
        [
            {
                "Name": "Cube Material",
                "Ambient": [0.5, 0.5, 0.5, 1],
                "Diffuse": [0.75, 0.75, 0.75, 1],
                "Specular": [1, 1, 1, 1],
                "Alpha": 1,
                "Shininess": 5,
                "Shader": "Texture Shader"
            }
        ],
        "Meshes":
        [
            {
                "Name": "Cube Mesh",
                "Position": [-0.5,0.5,-0.5,-0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,-0.5,-0.5,-0.5,0.5,-0.5,-0.5,-0.5,0.5,-0.5,-0.5,0.5,-0.5,0.5,-0.5,0.5,-0.5,-0.5,-0.5,-0.5,-0.5,-0.5,0.5,-0.5,0.5,0.5,0.5,0.5,0.5,0.5,-0.5,0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,-0.5,0.5,0.5,-0.5,0.5,0.5,0.5,0.5,0.5,0.5,-0.5,0.5,-0.5,-0.5,-0.5,-0.5,-0.5,-0.5,0.5,-0.5],
                "Normals": [0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0,0.0,0.0,-1.0],
                "Colours": [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0],
                "Indices": [0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23],
                "Wireframe": [0,1,1,2,2,3,3,0, 4,5,5,6,6,7,7,4, 8,9,9,10,10,11,11,8, 12,13,13,14,14,15,15,12, 16,17,17,18,18,19,19,16, 20,21,21,22,22,23,23,20]
            }
        ],
        "Shaders":
        [
            {
                "Name": "Texture Shader",
                "VertexShader":"attribute vec3 A_Position;attribute vec3 A_Colour;attribute vec3 A_Normal;attribute vec2 A_UV;struct Matrix{mat4 ModelView;mat4 Projection; mat3 Normal;};uniform Matrix U_Matrix;varying vec4 V_Position;varying vec3 V_Normal;varying vec2 V_UV;varying vec3 V_Colour;void main(void){V_Position=U_Matrix.ModelView*vec4(A_Position,1.0);V_Normal=U_Matrix.Normal*A_Normal;V_Colour=A_Colour;V_UV=vec2(A_UV.s,1.0-A_UV.t);gl_Position=U_Matrix.Projection*V_Position;gl_PointSize=5.0;}",
                "FragmentShader": "precision mediump float;const int MAX_POINT=8;struct Material{vec4 Ambient;vec4 Diffuse;vec4 Specular;float Shininess;float Alpha;bool HasImage;bool HasBump;bool HasSpecular;};uniform Material U_Material;struct AmbientLight{vec4 Colour;float Intensity;};uniform AmbientLight U_Ambient;struct DirectionalLight{vec4 Colour;float Intensity;vec3 Direction;};uniform DirectionalLight U_Directional;struct PointLight{vec4 Colour;float Intensity;vec3 Position;float Radius;float Angle;};uniform PointLight U_Point[MAX_POINT];uniform int U_Point_Count;struct Sampler{sampler2D Image;sampler2D Bump;sampler2D Specular;};uniform Sampler U_Sampler;varying vec4 V_Position;varying vec3 V_Normal;varying vec2 V_UV;varying vec3 V_Colour;vec3 Directional(in vec3 normal){float weight=max(dot(normal,normalize(U_Directional.Direction)),0.0);vec3 colour=U_Material.Diffuse.rgb*(U_Directional.Colour.rgb*weight);return colour*U_Directional.Intensity;}vec3 Point(in vec3 normal,in float intensity){vec3 points=vec3(0.0);for(int i=0;i<MAX_POINT;++i){if(i<U_Point_Count){PointLight point=U_Point[i];float distance=length(point.Position-V_Position.xyz);if(distance<point.Radius){vec3 colour=vec3(0.0);vec3 direction=normalize(point.Position-V_Position.xyz);vec3 eyeVector=normalize(-normal.xyz);vec3 reflection=reflect(direction,normal);float diffuse_weight=max(dot(normal,direction),0.0);float specular_weight=pow(max(dot(reflection,eyeVector),0.0),U_Material.Shininess*intensity);colour=(U_Material.Diffuse.rgb*point.Colour.rgb*diffuse_weight+U_Material.Specular.rgb*specular_weight);colour=colour*(1.0-(distance/point.Radius));colour=colour*point.Intensity;points+=colour;}}}return points;}vec3 Light(){vec3 Normal=V_Normal;float intensity=1.0;if(U_Material.HasBump)Normal*=texture2D(U_Sampler.Bump,vec2(V_UV.s,V_UV.t)).xyz;if(U_Material.HasSpecular)intensity=texture2D(U_Sampler.Specular,vec2(V_UV.s,V_UV.t)).r;Normal=normalize(Normal);vec3 ambient=U_Ambient.Colour.rgb*U_Ambient.Intensity;return ambient+Directional(Normal)+Point(Normal,intensity);}vec4 Colour(){vec4 colour=vec4(U_Material.Ambient.rgb,1.0);if(U_Material.HasImage)colour*=texture2D(U_Sampler.Image,vec2(V_UV.s,V_UV.t));return colour;}void main(void){vec4 colour=Colour();vec3 light=Light();gl_FragColor=vec4(colour.rgb*light,0.0);}"
            },
            {
                "Name": "Green Shader",
                "VertexShader": "attribute vec3 A_Position;struct Matrix{mat4 ModelView;mat4 Projection;};uniform Matrix U_Matrix;void main(void){gl_Position=U_Matrix.Projection*U_Matrix.ModelView*vec4(A_Position,1.0);gl_PointSize=10.0;}",
                "FragmentShader": "precision mediump float;void main(void){gl_FragColor=vec4(0.0,1.0,0.0,1.0);}"
            }
        ]
    }
}