import Cloneable from '../Interfaces/Cloneable';
import List from '../Utility/List';
import Vector3 from './Vector3';
import Vector4 from './Vector4';
export default class Vector2 extends Float32Array implements Cloneable<Vector2> {
    constructor();
    constructor(vector: Vector2);
    constructor(vector: Vector3);
    constructor(vector: Vector4);
    constructor(array: Float32Array);
    constructor(array: number[]);
    constructor(list: List<number>);
    constructor(x: number, y: number);
    X: number;
    Y: number;
    static readonly ZERO: Vector2;
    static readonly ONE: Vector2;
    static readonly UNIT: Vector2;
    readonly Length: number;
    static Length(x?: Vector2 | Float32Array | number[] | number, y?: number): number;
    Set(array: Float32Array): Vector2;
    Set(array: number[]): Vector2;
    Set(list: List<number>): Vector2;
    Set(x: number, y: number): Vector2;
    static Set(vector: Vector2, x: Vector2 | Vector3 | Vector4 | Float32Array | number[] | List<number> | number, y?: number): Vector2;
    Sum(vector: Vector2): Vector2;
    Sum(vector: Vector3): Vector2;
    Sum(vector: Vector4): Vector2;
    Sum(array: Float32Array): Vector2;
    Sum(array: number[]): Vector2;
    Sum(list: List<number>): Vector2;
    Sum(x: number, y: number): Vector2;
    static Sum(vector: Vector2, x: Vector2 | Vector3 | Vector4 | Float32Array | number[] | List<number> | number, y?: number): Vector2;
    Diff(vector: Vector2): Vector2;
    Diff(vector: Vector3): Vector2;
    Diff(vector: Vector4): Vector2;
    Diff(array: Float32Array): Vector2;
    Diff(array: number[]): Vector2;
    Diff(list: List<number>): Vector2;
    Diff(x: number, y: number): Vector2;
    static Diff(vector: Vector2, x: Vector2 | Vector3 | Vector4 | Float32Array | number[] | List<number> | number, y?: number): Vector2;
    Mult(vector: Vector2): Vector2;
    Mult(vector: Vector3): Vector2;
    Mult(vector: Vector4): Vector2;
    Mult(array: Float32Array): Vector2;
    Mult(array: number[]): Vector2;
    Mult(list: List<number>): Vector2;
    Mult(x: number, y: number): Vector2;
    static Mult(vector: Vector2, x: Vector2 | Vector3 | Vector4 | Float32Array | number[] | List<number> | number, y?: number): Vector2;
    Scale(scalar: number): Vector2;
    static Scale(vector: Vector2, scalar: number): Vector2;
    Dot(vector: Vector2): number;
    Dot(vector: Vector3): number;
    Dot(vector: Vector4): number;
    Dot(array: Float32Array): number;
    Dot(array: number[]): number;
    Dot(list: List<number>): number;
    Dot(x: number, y: number): number;
    static Dot(vector: Vector2, x: Vector2 | Vector3 | Vector4 | Float32Array | number[] | List<number> | number, y?: number): number;
    Unit(): Vector2;
    static Unit(vector: Vector2): Vector2;
    toString(): string;
    Clone(): Vector2;
    private static Destructure;
}
