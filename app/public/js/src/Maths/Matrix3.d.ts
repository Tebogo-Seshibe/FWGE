import Cloneable from '../Interfaces/Cloneable';
import List from '../Utility/List';
import Matrix2 from './Matrix2';
import Matrix4 from './Matrix4';
export default class Matrix3 extends Float32Array implements Cloneable<Matrix3> {
    constructor();
    constructor(matrix: Matrix2);
    constructor(matrix: Matrix3);
    constructor(matrix: Matrix4);
    constructor(array: Float32Array);
    constructor(array: number[]);
    constructor(list: List<number>);
    constructor(m11: number, m12: number, m13: number, m21: number, m22: number, m23: number, m31: number, m32: number, m33: number);
    M11: number;
    M12: number;
    M13: number;
    M21: number;
    M22: number;
    M23: number;
    M31: number;
    M32: number;
    M33: number;
    static readonly ZERO: Matrix3;
    static readonly IDENTITY: Matrix3;
    Set(matrix: Matrix2): Matrix3;
    Set(matrix: Matrix3): Matrix3;
    Set(matrix: Matrix4): Matrix3;
    Set(array: Float32Array): Matrix3;
    Set(array: number[]): Matrix3;
    Set(array: List<number>): Matrix3;
    Set(m11: number, m12: number, m13: number, m21: number, m22: number, m23: number, m31: number, m32: number, m33: number): Matrix3;
    static Set(matrix: Matrix3, m11: Matrix4 | Matrix3 | Matrix2 | Float32Array | number[] | List<number> | number, m12?: number, m13?: number, m21?: number, m22?: number, m23?: number, m31?: number, m32?: number, m33?: number): Matrix3;
    Transpose(): Matrix3;
    static Transpose(matrix: Matrix3): Matrix3;
    readonly Determinant: number;
    static Determinant(m11: Matrix3 | Float32Array | number[] | List<number> | number, m12?: number, m13?: number, m21?: number, m22?: number, m23?: number, m31?: number, m32?: number, m33?: number): number;
    Inverse(): Matrix3;
    static Inverse(matrix: Matrix3): Matrix3;
    Sum(matrix: Matrix3): Matrix3;
    Sum(array: Float32Array): Matrix3;
    Sum(array: number[]): Matrix3;
    Sum(m11: number, m12: number, m21: number, m22: number): Matrix3;
    static Sum(matrix: Matrix3, m11: Matrix3 | Float32Array | number[] | List<number> | number, m12?: number, m13?: number, m21?: number, m22?: number, m23?: number, m31?: number, m32?: number, m33?: number): Matrix3;
    Mult(m11: Matrix3): Matrix3;
    Mult(array: Float32Array): Matrix3;
    Mult(array: number[]): Matrix3;
    Mult(m11: number, m12: number, m21: number, m22: number): Matrix3;
    static Mult(matrix: Matrix3, m11: Matrix3 | Float32Array | number[] | List<number> | number, m12?: number, m13?: number, m21?: number, m22?: number, m23?: number, m31?: number, m32?: number, m33?: number): Matrix3;
    Scale(scaler: number): Matrix3;
    static Scale(matrix: Matrix3, scaler: number): Matrix3;
    Identity(): Matrix3;
    static Identity(matrix: Matrix3): Matrix3;
    Clone(): Matrix3;
    private static Destructure;
}
